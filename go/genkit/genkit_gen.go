// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by jsonschemagen. DO NOT EDIT.

package genkit

type Candidate struct {
	Custom        any
	FinishMessage string
	FinishReason  FinishReason
	Index         int
	Message       *Message
	Usage         *GenerationUsage
}

type FinishReason string

const (
	FinishReasonStop    FinishReason = "stop"
	FinishReasonLength  FinishReason = "length"
	FinishReasonBlocked FinishReason = "blocked"
	FinishReasonOther   FinishReason = "other"
	FinishReasonUnknown FinishReason = "unknown"
)

type DocumentData struct {
	Content  []any
	Metadata map[string]any
}

type FlowError struct {
	Error      string
	Stacktrace string
}

type FlowInvokeEnvelopeMessage struct {
	Resume       *FlowInvokeEnvelopeMessage_resume
	Retry        *FlowInvokeEnvelopeMessage_retry
	RunScheduled *FlowInvokeEnvelopeMessage_runScheduled
	Schedule     *FlowInvokeEnvelopeMessage_schedule
	Start        *FlowInvokeEnvelopeMessage_start
	State        *FlowInvokeEnvelopeMessage_state
}

type FlowInvokeEnvelopeMessage_resume struct {
	FlowID  string
	Payload any
}

type FlowInvokeEnvelopeMessage_retry struct {
	FlowID string
}

type FlowInvokeEnvelopeMessage_runScheduled struct {
	FlowID string
}

type FlowInvokeEnvelopeMessage_schedule struct {
	Delay float64
	Input any
}

type FlowInvokeEnvelopeMessage_start struct {
	Input  any
	Labels map[string]string
}

type FlowInvokeEnvelopeMessage_state struct {
	FlowID string
}

type FlowResponse struct {
	Response any
}

type FlowState struct {
	BlockedOnStep   any
	Cache           map[string]any
	EventsTriggered map[string]any
	Executions      []*FlowStateExecution
	FlowID          string
	Input           any
	Name            string
	Operation       *Operation
	StartTime       float64
	TraceContext    string
}

type FlowStateExecution struct {
	EndTime   float64
	StartTime float64
	TraceIDs  []string
}

type GenerationConfig struct {
	Custom          map[string]any
	MaxOutputTokens float64
	StopSequences   []string
	Temperature     float64
	TopK            float64
	TopP            float64
}

type GenerationRequest struct {
	Candidates float64
	Config     *GenerationConfig
	Messages   []*Message
	Output     *GenerationRequestOutput
	Tools      []*ToolDefinition
}

type GenerationRequestOutput struct {
	Format OutputFormat
	Schema map[string]any
}

type OutputFormat string

const (
	OutputFormatJSON OutputFormat = "json"
	OutputFormatText OutputFormat = "text"
)

type GenerationResponse struct {
	Candidates []*Candidate
	Custom     any
	Usage      *GenerationUsage
}

type GenerationUsage struct {
	Custom       map[string]float64
	InputTokens  float64
	OutputTokens float64
	TotalTokens  float64
}

type Message struct {
	Content []*Part
	Role    Role
}

type Operation struct {
	BlockedOnStep *BlockedOnStep
	// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
	Done bool
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time.
	Metadata any
	// server-assigned name, which is only unique within the same service that originally returns it.
	Name   string
	Result any
}

type BlockedOnStep struct {
	Name   string
	Schema string
}

type Role string

const (
	RoleSystem Role = "system"
	RoleUser   Role = "user"
	RoleModel  Role = "model"
	RoleTool   Role = "tool"
)

type ToolDefinition struct {
	// Valid JSON Schema representing the input of the tool.
	InputSchema map[string]any
	Name        string
	// Valid JSON Schema describing the output of the tool.
	OutputSchema map[string]any
}

type ToolRequestPart struct {
	ToolRequest *ToolRequestPart_toolRequest
}

type ToolRequestPart_toolRequest struct {
	Input any
	Name  string
	Ref   string
}

type ToolResponsePart struct {
	ToolResponse *ToolResponsePart_toolResponse
}

type ToolResponsePart_toolResponse struct {
	Name   string
	Output any
	Ref    string
}
