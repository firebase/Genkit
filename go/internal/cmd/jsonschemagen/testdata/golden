// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was generated by jsonschemagen. DO NOT EDIT.

package test

type Candidate struct {
	Custom        any
	FinishMessage string
	FinishReason  FinishReason
	Index         int
	Message       *Message
	Usage         *GenerationUsage
}

type FinishReason string

const (
	FinishReasonStop    FinishReason = "stop"
	FinishReasonLength  FinishReason = "length"
	FinishReasonBlocked FinishReason = "blocked"
	FinishReasonOther   FinishReason = "other"
	FinishReasonUnknown FinishReason = "unknown"
)

type DocumentData struct {
	Content  []any
	Metadata map[string]any
}

type FlowError struct {
	Error      string
	Stacktrace string
}

type FlowInvokeEnvelopeMessage struct {
	Resume       *FlowInvokeEnvelopeMessage_resume
	Retry        *FlowInvokeEnvelopeMessage_retry
	RunScheduled *FlowInvokeEnvelopeMessage_runScheduled
	Schedule     *FlowInvokeEnvelopeMessage_schedule
	Start        *FlowInvokeEnvelopeMessage_start
	State        *FlowInvokeEnvelopeMessage_state
}

type FlowInvokeEnvelopeMessage_resume struct {
	FlowID  string
	Payload any
}

type FlowInvokeEnvelopeMessage_retry struct {
	FlowID string
}

type FlowInvokeEnvelopeMessage_runScheduled struct {
	FlowID string
}

type FlowInvokeEnvelopeMessage_schedule struct {
	Delay float64
	Input any
}

type FlowInvokeEnvelopeMessage_start struct {
	Input  any
	Labels map[string]string
}

type FlowInvokeEnvelopeMessage_state struct {
	FlowID string
}

type FlowResponse struct {
	Response any
}

type FlowState struct {
	BlockedOnStep   any
	Cache           map[string]any
	EventsTriggered map[string]any
	Executions      []*FlowStateExecution
	FlowID          string
	Input           any
	Name            string
	Operation       *Operation
	StartTime       float64
	TraceContext    string
}

type FlowStateExecution struct {
	EndTime   float64
	StartTime float64
	TraceIDs  []string
}

type GenerationConfig struct {
	Custom          map[string]any
	MaxOutputTokens float64
	StopSequences   []string
	Temperature     float64
	TopK            float64
	TopP            float64
}

type GenerationRequest struct {
	Candidates float64
	Config     *GenerationConfig
	Messages   []*Message
	Output     *GenerationRequest_output
	Tools      []*ToolDefinition
}

type GenerationRequest_output struct {
	Format GenerationRequest_output_format
	Schema map[string]any
}

type GenerationRequest_output_format string

const (
	GenerationRequest_output_formatJson GenerationRequest_output_format = "json"
	GenerationRequest_output_formatText GenerationRequest_output_format = "text"
)

type GenerationResponse struct {
	Candidates []*Candidate
	Custom     any
	Usage      *GenerationUsage
}

type GenerationUsage struct {
	Custom       map[string]float64
	InputTokens  float64
	OutputTokens float64
	TotalTokens  float64
}

type InstrumentationLibrary struct {
	Name      string
	SchemaUrl string
	Version   string
}

type Link struct {
	Attributes             map[string]any
	Context                *SpanContext
	DroppedAttributesCount float64
}

type MediaPart struct {
	Media *MediaPart_media
}

type MediaPart_media struct {
	ContentType string
	Url         string
}

type Message struct {
	Content []*Part
	Role    Role
}

type Operation struct {
	BlockedOnStep *Operation_blockedOnStep
	// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
	Done bool
	// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time.
	Metadata any
	// server-assigned name, which is only unique within the same service that originally returns it.
	Name   string
	Result *FlowResult
}

type Operation_blockedOnStep struct {
	Name   string
	Schema string
}

type Role string

const (
	RoleSystem Role = "system"
	RoleUser   Role = "user"
	RoleModel  Role = "model"
	RoleTool   Role = "tool"
)

type SpanContext struct {
	IsRemote   bool
	SpanID     string
	TraceFlags float64
	TraceID    string
}

type SpanData struct {
	Attributes              map[string]any
	DisplayName             string
	EndTime                 float64
	InstrumentationLibrary  *InstrumentationLibrary
	Links                   []*Link
	ParentSpanID            string
	SameProcessAsParentSpan *SpanData_sameProcessAsParentSpan
	SpanID                  string
	SpanKind                string
	StartTime               float64
	Status                  *SpanStatus
	TimeEvents              *SpanData_timeEvents
	TraceID                 string
}

type SpanData_sameProcessAsParentSpan struct {
	Value bool
}

type SpanData_timeEvents struct {
	TimeEvent []*TimeEvent
}

type SpanMetadata struct {
	Input    any
	IsRoot   bool
	Metadata map[string]string
	Name     string
	Output   any
	State    SpanMetadata_state
}

type SpanMetadata_state string

const (
	SpanMetadata_stateSuccess SpanMetadata_state = "success"
	SpanMetadata_stateError   SpanMetadata_state = "error"
)

type SpanStatus struct {
	Code    float64
	Message string
}

type TextPart struct {
	Text string
}

type TimeEvent struct {
	Annotation *TimeEvent_annotation
	Time       float64
}

type TimeEvent_annotation struct {
	Attributes  map[string]any
	Description string
}

type ToolDefinition struct {
	// Valid JSON Schema representing the input of the tool.
	InputSchema map[string]any
	Name        string
	// Valid JSON Schema describing the output of the tool.
	OutputSchema map[string]any
}

type ToolRequestPart struct {
	ToolRequest *ToolRequestPart_toolRequest
}

type ToolRequestPart_toolRequest struct {
	Input any
	Name  string
	Ref   string
}

type ToolResponsePart struct {
	ToolResponse *ToolResponsePart_toolResponse
}

type ToolResponsePart_toolResponse struct {
	Name   string
	Output any
	Ref    string
}

type TraceData struct {
	DisplayName string
	EndTime     float64
	Spans       map[string]*SpanData
	StartTime   float64
}
