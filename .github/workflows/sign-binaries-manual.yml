# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: Sign Binaries (Manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to sign binaries for (e.g., v1.0.0-rc.1)'
        required: true
        type: string

jobs:
  sign-binaries:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate version format
        shell: bash
        run: |
          VERSION="${{ inputs.version }}"
          # Use grep for cross-platform regex matching
          if ! echo "$VERSION" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$' > /dev/null; then
            echo "Error: Version '$VERSION' does not follow semantic versioning format (e.g., v1.0.0, v1.0.0-rc.1)"
            exit 1
          fi
          echo "✓ Version format is valid: $VERSION"
      
      - name: Install dependencies
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi
      
      - name: Sign and upload binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting binary signing simulation for version ${{ inputs.version }}"
          ./scripts/sign-and-upload-binaries.sh "${{ inputs.version }}"
      
      - name: Verify signed binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ inputs.version }}"
          
          echo "Verifying signed binaries for release $VERSION..."
          
          # Get release assets
          ASSETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION" | \
            jq -r '.assets[].name' | sort)
          
          # Expected signed binaries
          EXPECTED_SIGNED=(
            "genkit-linux-x64-signed"
            "genkit-linux-arm64-signed"
            "genkit-darwin-x64-signed"
            "genkit-darwin-arm64-signed"
            "genkit-win32-x64-signed.exe"
          )
          
          # Check for each expected signed binary
          MISSING=()
          for expected in "${EXPECTED_SIGNED[@]}"; do
            if ! echo "$ASSETS" | grep -q "^$expected$"; then
              MISSING+=("$expected")
            else
              echo "✓ Found: $expected"
            fi
          done
          
          if [ ${#MISSING[@]} -gt 0 ]; then
            echo ""
            echo "❌ Missing signed binaries:"
            printf '  - %s\n' "${MISSING[@]}"
            exit 1
          fi
          
          echo ""
          echo "✅ All signed binaries uploaded successfully!"
          echo ""
          echo "View the release at: https://github.com/${{ github.repository }}/releases/tag/$VERSION"