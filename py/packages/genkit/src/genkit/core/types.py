# Copyright 2025 Google LLC
# SPDX-License-Identifier: Apache-2.0


# generated by datamodel-codegen:
#   filename:  genkit-schema.json
#   timestamp: 2025-01-17T17:30:26+00:00

from __future__ import annotations

from enum import Enum
from pydantic import ConfigDict, BaseModel, Field
from typing import Any, Dict, List, Optional, Union


class InstrumentationLibrary(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    version: Optional[str] = None
    schemaUrl: Optional[str] = None


class SpanContext(BaseModel):
    model_config = ConfigDict(extra='forbid')

    traceId: str
    spanId: str
    isRemote: Optional[bool] = None
    traceFlags: float


class SameProcessAsParentSpan(BaseModel):
    model_config = ConfigDict(extra='forbid')

    value: bool


class State(Enum):
    success = 'success'
    error = 'error'


class SpanMetadata(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    state: Optional[State] = None
    input: Optional[Any] = None
    output: Optional[Any] = None
    isRoot: Optional[bool] = None
    metadata: Optional[Dict[str, str]] = None


class SpanStatus(BaseModel):
    model_config = ConfigDict(extra='forbid')

    code: float
    message: Optional[str] = None


class Annotation(BaseModel):
    model_config = ConfigDict(extra='forbid')

    attributes: Dict[str, Any]
    description: str


class TimeEvent(BaseModel):
    model_config = ConfigDict(extra='forbid')

    time: float
    annotation: Annotation


class Code(Enum):
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class CandidateError(BaseModel):
    model_config = ConfigDict(extra='forbid')

    index: float
    code: Code
    message: Optional[str] = None


class FinishReason(Enum):
    stop = 'stop'
    length = 'length'
    blocked = 'blocked'
    other = 'other'
    unknown = 'unknown'


class DataPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Optional[Any] = None
    toolRequest: Optional[Any] = None
    toolResponse: Optional[Any] = None
    data: Optional[Any] = None
    metadata: Optional[Dict[str, Any]] = None


class Format(Enum):
    json = 'json'
    text = 'text'
    media = 'media'


class Output(BaseModel):
    model_config = ConfigDict(extra='forbid')

    format: Optional[Format] = None
    schema_: Optional[Dict[str, Any]] = Field(None, alias='schema')


class Content(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Optional[Any] = None


class Media(BaseModel):
    model_config = ConfigDict(extra='forbid')

    contentType: Optional[str] = None
    url: str


class Content1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Media


class ContextItem(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: List[Union[Content, Content1]]
    metadata: Optional[Dict[str, Any]] = None


class GenerationCommonConfig(BaseModel):
    model_config = ConfigDict(extra='forbid')

    version: Optional[str] = None
    temperature: Optional[float] = None
    maxOutputTokens: Optional[float] = None
    topK: Optional[float] = None
    topP: Optional[float] = None
    stopSequences: Optional[List[str]] = None


class GenerationUsage(BaseModel):
    model_config = ConfigDict(extra='forbid')

    inputTokens: Optional[float] = None
    outputTokens: Optional[float] = None
    totalTokens: Optional[float] = None
    inputCharacters: Optional[float] = None
    outputCharacters: Optional[float] = None
    inputImages: Optional[float] = None
    outputImages: Optional[float] = None
    inputVideos: Optional[float] = None
    outputVideos: Optional[float] = None
    inputAudioFiles: Optional[float] = None
    outputAudioFiles: Optional[float] = None
    custom: Optional[Dict[str, float]] = None


class Role(Enum):
    system = 'system'
    user = 'user'
    model = 'model'
    tool = 'tool'


class ToolDefinition(BaseModel):
    model_config = ConfigDict(extra='forbid')

    name: str
    description: str
    inputSchema: Dict[str, Any] = Field(
        ..., description='Valid JSON Schema representing the input of the tool.'
    )
    outputSchema: Optional[Dict[str, Any]] = Field(
        None, description='Valid JSON Schema describing the output of the tool.'
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None, description='additional metadata for this tool definition'
    )


class ToolRequest1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    ref: Optional[str] = None
    name: str
    input: Optional[Any] = None


class ToolResponse1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    ref: Optional[str] = None
    name: str
    output: Optional[Any] = None


class Content2(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Optional[Any] = None


class Media2(BaseModel):
    model_config = ConfigDict(extra='forbid')

    contentType: Optional[str] = None
    url: str


class Content3(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Media2


class Items(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: List[Union[Content2, Content3]]
    metadata: Optional[Dict[str, Any]] = None


class OutputModel(BaseModel):
    model_config = ConfigDict(extra='forbid')

    format: Optional[Format] = None
    schema_: Optional[Dict[str, Any]] = Field(None, alias='schema')


class Link(BaseModel):
    model_config = ConfigDict(extra='forbid')

    context: Optional[SpanContext] = None
    attributes: Optional[Dict[str, Any]] = None
    droppedAttributesCount: Optional[float] = None


class TimeEvents(BaseModel):
    model_config = ConfigDict(extra='forbid')

    timeEvent: Optional[List[TimeEvent]] = None


class SpanData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    spanId: str
    traceId: str
    parentSpanId: Optional[str] = None
    startTime: float
    endTime: float
    attributes: Dict[str, Any]
    displayName: str
    links: Optional[List[Link]] = None
    instrumentationLibrary: InstrumentationLibrary
    spanKind: str
    sameProcessAsParentSpan: Optional[SameProcessAsParentSpan] = None
    status: Optional[SpanStatus] = None
    timeEvents: Optional[TimeEvents] = None
    truncated: Optional[bool] = None


class TraceData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    traceId: str
    displayName: Optional[str] = None
    startTime: Optional[float] = None
    endTime: Optional[float] = None
    spans: Dict[str, SpanData]


class MediaPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Media
    toolRequest: Optional[Any] = None
    toolResponse: Optional[Any] = None
    data: Optional[Any] = None
    metadata: Optional[Dict[str, Any]] = None


class Supports(BaseModel):
    model_config = ConfigDict(extra='forbid')

    multiturn: Optional[bool] = None
    media: Optional[bool] = None
    tools: Optional[bool] = None
    systemRole: Optional[bool] = None
    output: Optional[List[Format]] = None
    context: Optional[bool] = None


class ModelInfo(BaseModel):
    model_config = ConfigDict(extra='forbid')

    versions: Optional[List[str]] = None
    label: Optional[str] = None
    supports: Optional[Supports] = None


class TextPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: str
    media: Optional[Any] = None
    toolRequest: Optional[Any] = None
    toolResponse: Optional[Any] = None
    data: Optional[Any] = None
    metadata: Optional[Dict[str, Any]] = None


class ToolRequestPart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Optional[Any] = None
    toolRequest: ToolRequest1
    toolResponse: Optional[Any] = None
    data: Optional[Any] = None
    metadata: Optional[Dict[str, Any]] = None


class ToolResponsePart(BaseModel):
    model_config = ConfigDict(extra='forbid')

    text: Optional[Any] = None
    media: Optional[Any] = None
    toolRequest: Optional[Any] = None
    toolResponse: ToolResponse1
    data: Optional[Any] = None
    metadata: Optional[Dict[str, Any]] = None


class DocumentData(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: List[
        Union[TextPart, MediaPart, ToolRequestPart, ToolResponsePart, DataPart]
    ]
    metadata: Optional[Dict[str, Any]] = None


class GenerateResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: List[
        Union[TextPart, MediaPart, ToolRequestPart, ToolResponsePart, DataPart]
    ]
    custom: Optional[Any] = None
    aggregated: Optional[bool] = None
    index: float


class Message(BaseModel):
    model_config = ConfigDict(extra='forbid')

    role: Role
    content: List[
        Union[TextPart, MediaPart, ToolRequestPart, ToolResponsePart, DataPart]
    ]
    metadata: Optional[Dict[str, Any]] = None


class ModelResponseChunk(BaseModel):
    model_config = ConfigDict(extra='forbid')

    content: List[
        Union[TextPart, MediaPart, ToolRequestPart, ToolResponsePart, DataPart]
    ]
    custom: Optional[Any] = None
    aggregated: Optional[bool] = None


class Candidate(BaseModel):
    model_config = ConfigDict(extra='forbid')

    index: float
    message: Message
    usage: Optional[GenerationUsage] = None
    finishReason: FinishReason
    finishMessage: Optional[str] = None
    custom: Optional[Any] = None


class GenerateRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    messages: List[Message]
    config: Optional[Any] = None
    tools: Optional[List[ToolDefinition]] = None
    output: Optional[Output] = None
    context: Optional[List[ContextItem]] = None
    candidates: Optional[float] = None


class GenerateResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    message: Optional[Message] = None
    finishReason: Optional[FinishReason] = None
    finishMessage: Optional[str] = None
    latencyMs: Optional[float] = None
    usage: Optional[GenerationUsage] = None
    custom: Optional[Any] = None
    request: Optional[GenerateRequest] = None
    candidates: Optional[List[Candidate]] = None


class ModelRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    messages: List[Message]
    config: Optional[Any] = None
    tools: Optional[List[ToolDefinition]] = None
    output: Optional[OutputModel] = None
    context: Optional[List[Items]] = None


class ModelResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    message: Optional[Message] = None
    finishReason: FinishReason
    finishMessage: Optional[str] = None
    latencyMs: Optional[float] = None
    usage: Optional[GenerationUsage] = None
    custom: Optional[Any] = None
    request: Optional[GenerateRequest] = None
